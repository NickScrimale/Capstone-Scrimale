{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sooth\\\\workspace\\\\Capstone-Scrimale\\\\src\\\\components\\\\questions\\\\QuestionForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom'; // import { addQuestion } from '../../modules/QuestionManager';\n\nimport './QuestionForm.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const QuestionForm = () => {\n  _s();\n\n  // State will contain both animal data as well as an isLoading flag.\n  // Define the initial state of the form inputs with useState()\n  const [question, setQuestion] = useState({\n    question: \"\",\n    answer: \"\"\n  });\n  const [isLoading, setIsLoading] = useState(false); // you will need the the `getAll` in the LocationsManager and CustomersManager to complete this section\n\n  const navigate = useNavigate(); //when a field changes, update state. The return will re-render and display based on the values in state\n  // NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\n  //Controlled component\n\n  const handleControlledInputChange = event => {\n    /* When changing a state object or array,\r\n    always create a copy, make changes, and then set state.*/\n    const newQuestion = { ...question\n    };\n    let selectedVal = event.target.value; // forms always provide values as strings. But we want to save the ids as numbers.\n\n    if (event.target.id.includes(\"Id\")) {\n      selectedVal = parseInt(selectedVal);\n    }\n    /* Animal is an object with properties.\r\n    Set the property to the new value\r\n    using object bracket notation. */\n\n\n    newQuestion[event.target.id] = selectedVal; // update state\n\n    setQuestion(newQuestion);\n  };\n\n  useEffect(() => {//load location data and setState\n  }, []);\n  useEffect(() => {//load customer data and setState\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"form\", {\n    className: \"questionForm\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"questionForm__title\",\n      children: \"New Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"name\",\n          children: \"Question:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"name\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"Question\",\n          value: question.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"fieldset\", {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"form-group\",\n        children: [/*#__PURE__*/_jsxDEV(\"label\", {\n          htmlFor: \"breed\",\n          children: \"Answer:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 65,\n          columnNumber: 6\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          id: \"breed\",\n          onChange: handleControlledInputChange,\n          required: true,\n          autoFocus: true,\n          className: \"form-control\",\n          placeholder: \"Answer\",\n          value: Answer.name\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 6\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 5\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"btn btn-primary\",\n      onClick: handleClickCreateQuestion,\n      children: \"Create Question\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 71,\n      columnNumber: 4\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 55,\n    columnNumber: 3\n  }, this);\n};\n\n_s(QuestionForm, \"zVHOiQmEaP8AxgNqwrd+/DyS28c=\", false, function () {\n  return [useNavigate];\n});\n\n_c = QuestionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuestionForm\");","map":{"version":3,"sources":["C:/Users/Sooth/workspace/Capstone-Scrimale/src/components/questions/QuestionForm.js"],"names":["React","useState","useEffect","useNavigate","QuestionForm","question","setQuestion","answer","isLoading","setIsLoading","navigate","handleControlledInputChange","event","newQuestion","selectedVal","target","value","id","includes","parseInt","name","Answer","handleClickCreateQuestion"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\n// import { addQuestion } from '../../modules/QuestionManager';\r\nimport './QuestionForm.css'\r\n\r\nexport const QuestionForm = () => {\r\n\t// State will contain both animal data as well as an isLoading flag.\r\n\t// Define the initial state of the form inputs with useState()\r\n\r\n\tconst [question, setQuestion] = useState({\r\n\t\tquestion: \"\",\r\n\t\tanswer: \"\",\r\n\t});\r\n\r\n\tconst [isLoading, setIsLoading] = useState(false);\r\n\r\n\t// you will need the the `getAll` in the LocationsManager and CustomersManager to complete this section\r\n\t\r\n\r\n\tconst navigate = useNavigate();\r\n\r\n\t//when a field changes, update state. The return will re-render and display based on the values in state\r\n\t// NOTE! What's happening in this function can be very difficult to grasp. Read it over many times and ask a lot questions about it.\r\n\t//Controlled component\r\n\r\n\tconst handleControlledInputChange = (event) => {\r\n\t\t/* When changing a state object or array,\r\n\t\talways create a copy, make changes, and then set state.*/\r\n\t\tconst newQuestion = { ...question }\r\n\t\tlet selectedVal = event.target.value\r\n\t\t// forms always provide values as strings. But we want to save the ids as numbers.\r\n\t\tif (event.target.id.includes(\"Id\")) {\r\n\t\t\tselectedVal = parseInt(selectedVal)\r\n\t\t}\r\n\t\t/* Animal is an object with properties.\r\n\t\tSet the property to the new value\r\n\t\tusing object bracket notation. */\r\n\t\tnewQuestion[event.target.id] = selectedVal\r\n\t\t// update state\r\n\t\tsetQuestion(newQuestion)\r\n\t}\r\n\r\n    useEffect(() => {\r\n\t\t//load location data and setState\r\n\t}, []);\r\n\r\n     useEffect(() => {\r\n\t\t//load customer data and setState\r\n\t}, []);\r\n\r\n\r\n\t\r\n\r\n\treturn (\r\n\t\t<form className=\"questionForm\">\r\n\t\t\t<h2 className=\"questionForm__title\">New Question</h2>\r\n\t\t\t<fieldset>\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"name\">Question:</label>\r\n\t\t\t\t\t<input type=\"text\" id=\"name\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Question\" value={question.name} />\r\n\t\t\t\t</div>\r\n\t\t\t</fieldset>\r\n\t\t\t<fieldset>\r\n\t\t\t\t<div className=\"form-group\">\r\n\t\t\t\t\t<label htmlFor=\"breed\">Answer:</label>\r\n\t\t\t\t\t<input type=\"text\" id=\"breed\" onChange={handleControlledInputChange} required autoFocus className=\"form-control\" placeholder=\"Answer\" value={Answer.name} />\r\n\t\t\t\t</div>\r\n\t\t\t</fieldset>\r\n\t\t\t\r\n\t\t\t\r\n\t\t\t<button className=\"btn btn-primary\"\r\n\t\t\t\tonClick={handleClickCreateQuestion}>\r\n\t\t\t\tCreate Question\r\n          </button>\r\n\t\t</form>\r\n\t)\r\n};\r\n"]},"metadata":{},"sourceType":"module"}